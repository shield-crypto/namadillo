function o(n,s){return new Promise(e=>{n.addEventListener("message",function t({data:r}){(r==null?void 0:r.type)===s&&(n.removeEventListener("message",t),e(r))})})}o(self,"wasm_bindgen_worker_init").then(async({init:n,receiver:s})=>{const e=await import("./shared-QSq-gKxu.js");await e.default(n),postMessage({type:"wasm_bindgen_worker_ready"}),e.wbg_rayon_start_worker(s)});async function i(n,s,e){if(e.numThreads()===0)throw new Error("num_threads must be > 0.");const t={type:"wasm_bindgen_worker_init",init:{module_or_path:n,memory:s},receiver:e.receiver()};await Promise.all(Array.from({length:e.numThreads()},async()=>{const r=new Worker(self.location.href,{type:"module"});return r.postMessage(t),await o(r,"wasm_bindgen_worker_ready"),r})),e.build()}export{i as s};
