name: Check & Build Namadillo (with Input)

on:
#  schedule:
#    - cron: "0 * * * *"  # Runs every hour
  workflow_dispatch:
    inputs:
      build_tag:
        description: 'A tag of the Namadillo source to use (otherwise latest is used)'
        default: ''
        required: false
        type: string

permissions:
  contents: write
  packages: write

env:
  CHAIN_ID: "namada.5f5de2dd1b88cba30586420"

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Print environment variables
        run: |
          echo "Tag: " ${{ inputs.build_tag }}
      - name: Checkout this repository
        uses: actions/checkout@v4
      - name: Load last processed tag
        id: load-last-tag
        run: |
          if [[ -f .github/last_tag.txt ]]; then
            LAST_TAG=$(cat .github/last_tag.txt)
            echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
          else
            echo "LAST_TAG=" >> $GITHUB_ENV
          fi
          echo "Loaded Last Processed Tag. LAST_TAG=" 
      - name: Clone Namada repository
        uses: actions/checkout@v4
        with:
            repository: anoma/namada-interface
            fetch-depth: 0  # Fetch all history and tags
            path: source-repo
  
      - name: Fetch latest Namadillo tag
        id: check-tag
        run: |
          cd source-repo
          echo "Last Processed Tag. LAST_TAG=" 
          echo "LAST_TAG=" >> $GITHUB_ENV
          LATEST_TAG=$(git tag --sort=-creatordate | grep -E '^namadillo@' | head -n 1)
          echo "Latest tag from Namada: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

          USER_INPUT_TAG="${{ inputs.build_tag }}"
          if [[ -n "$USER_INPUT_TAG" ]]; then
            echo "LATEST_TAG=$USER_INPUT_TAG" >> "$GITHUB_ENV"
            echo "Using user input tag: $LATEST_TAG"
          fi

          echo "$LATEST_TAG" > ../.github/last_tag.txt
          echo "do_build=true" >> $GITHUB_ENV
          echo switching to $LATEST_TAG for the build process 
          git checkout $LATEST_TAG
      - name: Restore yarn cache
        uses: actions/cache@v3
        with:
          path: |
            ./source-repo/node_modules
            ./source-repo/apps/*/node_modules
            ./source-repo/packages/*/node_modules
            ./source-repo/e2e/node_modules
            ./source-repo/.cache/puppeteer
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}

      - name: Restore Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            packages/shared/lib
            packages/crypto/lib
          shared-key: ${{ inputs.cache-name }}

      - name: Install dependencies
        run: yarn
        shell: bash
        working-directory: source-repo

      - name: Setup Rust toolchain
        run: rustup toolchain add nightly-2025-03-27

      - name: Install protoc
        run: sudo apt-get install -y protobuf-compiler

      - name: Build Namadillo
        working-directory: source-repo/apps/namadillo
        run: |
          export NODE_OPTIONS="--max_old_space_size=4096"
          yarn build

      - name: Build the Chrome extension
        working-directory: source-repo/apps/extension
        run: yarn build:chrome
        env:
            NAMADA_INTERFACE_NAMADA_CHAIN_ID: ${{ env.CHAIN_ID }}

      - name: Build the Firefox extension
        working-directory: source-repo/apps/extension
        run: yarn build:firefox
        env:
            NAMADA_INTERFACE_NAMADA_CHAIN_ID: ${{ env.CHAIN_ID }}

      - name: Copy the extensions for deployment
        run: |
            cp source-repo/apps/extension/build/firefox/namada_keychain-*.zip source-repo/apps/namadillo/dist/namada-keychain-firefox.zip
            cp source-repo/apps/extension/build/chrome/namada_keychain-*.zip source-repo/apps/namadillo/dist/namada-keychain-chrome.zip


      - name: Check if release exists
        id: check_release
        run: |
          if gh release view "${{ env.LATEST_TAG }}" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release if it doesn't exist
        run: |
          if ! gh release view ${{ env.LATEST_TAG }} &>/dev/null; then
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git checkout -b ${{ env.LATEST_TAG }}
            cp -r source-repo/apps/namadillo/dist/* .
            git add .
            git commit -m "${{ env.LATEST_TAG }} build"
            git push --set-upstream origin namadillo@v1.19.0
            gh release create ${{ env.LATEST_TAG }} --target "${{ env.LATEST_TAG }}" --title "${{ env.LATEST_TAG }}" --notes "Automated release for ${{ env.LATEST_TAG }}"
            git checkout main
          else
            echo "Release ${{ env.LATEST_TAG }} already exists."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
